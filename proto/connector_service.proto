syntax = "proto3";

package connector_service;

import "catalog.proto";
import "data.proto";

option java_outer_classname = "ConnectorServiceProto";
option java_package = "com.risingwave.proto";

message TableSchema {
  message Column {
    string name = 1;
    data.DataType data_type = 2;
  }
  repeated Column columns = 1;
  repeated uint32 pk_indices = 2;
}

message ValidationError {
  string error_message = 1;
}

/* Sink Service */

message SinkConfig {
  string connector_type = 1;
  map<string, string> properties = 2;
  TableSchema table_schema = 3;
}

enum SinkPayloadFormat {
  FORMAT_UNSPECIFIED = 0;
  JSON = 1;
  STREAM_CHUNK = 2;
}

message SinkStreamRequest {
  message StartSink {
    SinkConfig sink_config = 1;
    SinkPayloadFormat format = 2;
    uint64 sink_id = 3;
  }

  message WriteBatch {
    message JsonPayload {
      message RowOp {
        data.Op op_type = 1;
        string line = 2;
      }
      repeated RowOp row_ops = 1;
    }

    message StreamChunkPayload {
      bytes binary_data = 1;
    }

    oneof payload {
      JsonPayload json_payload = 1;
      StreamChunkPayload stream_chunk_payload = 2;
    }

    uint64 batch_id = 3;
    uint64 epoch = 4;
  }

  message StartEpoch {
    uint64 epoch = 1;
  }

  message SyncBatch {
    uint64 epoch = 1;
  }

  oneof request {
    StartSink start = 1;
    StartEpoch start_epoch = 2;
    WriteBatch write = 3;
    SyncBatch sync = 4;
  }
}

message SinkResponse {
  message SyncResponse {
    uint64 epoch = 1;
  }

  message StartEpochResponse {
    uint64 epoch = 1;
  }

  message WriteResponse {
    uint64 epoch = 1;
    uint64 batch_id = 2;
  }

  message StartResponse {}

  oneof response {
    SyncResponse sync = 2;
    StartEpochResponse start_epoch = 3;
    WriteResponse write = 4;
    StartResponse start = 5;
  }
}

message ValidateSinkRequest {
  SinkConfig sink_config = 1;
  catalog.SinkType sink_type = 2;
}

message ValidateSinkResponse {
  // On validation failure, we return the error.
  ValidationError error = 1;
}

/* Source Service */

message CdcMessage {
  string payload = 1;
  string partition = 2;
  string offset = 3;
}

enum SourceType {
  UNSPECIFIED = 0;
  MYSQL = 1;
  POSTGRES = 2;
  CITUS = 3;
}

message GetEventStreamRequest {
  uint64 source_id = 1;
  SourceType source_type = 2;
  string start_offset = 3;
  map<string, string> properties = 4;
}

message GetEventStreamResponse {
  uint64 source_id = 1;
  repeated CdcMessage events = 2;
}

message ValidateSourceRequest {
  uint64 source_id = 1;
  SourceType source_type = 2;
  map<string, string> properties = 3;
  TableSchema table_schema = 4;
}

message ValidateSourceResponse {
  // On validation failure, we return the error.
  ValidationError error = 1;
}

service ConnectorService {
  rpc SinkStream(stream SinkStreamRequest) returns (stream SinkResponse);
  rpc ValidateSink(ValidateSinkRequest) returns (ValidateSinkResponse);
  rpc GetEventStream(GetEventStreamRequest) returns (stream GetEventStreamResponse);
  rpc ValidateSource(ValidateSourceRequest) returns (ValidateSourceResponse);
}
