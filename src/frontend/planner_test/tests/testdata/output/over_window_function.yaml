# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- sql: |
    create table t(x int);
    select lag(x) over() from t;
  logical_plan: |
    LogicalProject { exprs: [first_value] }
    └─LogicalOverWindow { window_functions: [first_value(t.x) OVER(ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)] }
      └─LogicalProject { exprs: [t.x, t._row_id] }
        └─LogicalScan { table: t, columns: [t.x, t._row_id] }
  batch_error: |-
    Feature is not yet implemented: Batch over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
  stream_error: |-
    Feature is not yet implemented: General version of streaming over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
- sql: |
    create table t(x int);
    select lag(x) from t;
  binder_error: |-
    Bind error: failed to bind expression: lag(x)

    Caused by:
      Invalid input syntax: Window function `lag` must have OVER clause
- sql: |
    create table t(x int);
    select lead(x, 2) over() from t;
  logical_plan: |
    LogicalProject { exprs: [first_value] }
    └─LogicalOverWindow { window_functions: [first_value(t.x) OVER(ROWS BETWEEN 2 FOLLOWING AND 2 FOLLOWING)] }
      └─LogicalProject { exprs: [t.x, t._row_id, 2:Int32] }
        └─LogicalScan { table: t, columns: [t.x, t._row_id] }
  batch_error: |-
    Feature is not yet implemented: Batch over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
  stream_error: |-
    Feature is not yet implemented: General version of streaming over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
- sql: |
    create table t(x int);
    select lead(x, x + 1) over() from t;
  binder_error: |-
    Bind error: failed to bind expression: lead(x, x + 1) OVER ()

    Caused by:
      Feature is not yet implemented: non-const `offset` of `lead` function is not supported yet
    No tracking issue yet. Feel free to submit a feature request at https://github.com/risingwavelabs/risingwave/issues/new?labels=type%2Ffeature&template=feature_request.yml
- sql: |
    create table t(x int);
    select 1+row_number() over(ORDER BY x) from t;
  planner_error: |-
    Feature is not yet implemented: window function in expression: (1:Int32 + row_number() OVER(ORDER BY $0 ASC))
    No tracking issue yet. Feel free to submit a feature request at https://github.com/risingwavelabs/risingwave/issues/new?labels=type%2Ffeature&template=feature_request.yml
- sql: |
    create table t(x int);
    select sum(x) over() from t;
  logical_plan: |
    LogicalProject { exprs: [sum] }
    └─LogicalOverWindow { window_functions: [sum(t.x) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)] }
      └─LogicalProject { exprs: [t.x, t._row_id] }
        └─LogicalScan { table: t, columns: [t.x, t._row_id] }
  batch_plan: |
    BatchNestedLoopJoin { type: Inner, predicate: true, output: [sum(sum(t.x))] }
    ├─BatchExchange { order: [], dist: Single }
    | └─BatchScan { table: t, columns: [t.x], distribution: SomeShard }
    └─BatchSimpleAgg { aggs: [sum(sum(t.x))] }
      └─BatchExchange { order: [], dist: Single }
        └─BatchSimpleAgg { aggs: [sum(t.x)] }
          └─BatchScan { table: t, columns: [t.x], distribution: SomeShard }
  stream_error: |-
    Not supported: streaming nested-loop join
    HINT: The non-equal join in the query requires a nested-loop join executor, which could be very expensive to run. Consider rewriting the query to use dynamic filter as a substitute if possible.
    See also: https://github.com/risingwavelabs/rfcs/blob/main/rfcs/0033-dynamic-filter.md
- sql: |
    create table t(x int, y int);
    select x, y, min(x) over(PARTITION BY y ROWS 10 PRECEDING) from t;
  logical_plan: |
    LogicalProject { exprs: [t.x, t.y, min] }
    └─LogicalOverWindow { window_functions: [min(t.x) OVER(PARTITION BY t.y ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)] }
      └─LogicalProject { exprs: [t.x, t.y, t._row_id] }
        └─LogicalScan { table: t, columns: [t.x, t.y, t._row_id] }
- sql: |
    create table t(x int, y int);
    select x, y, min(x) over(PARTITION BY y ROWS BETWEEN 1 PRECEDING AND 2 FOLLOWING) from t;
  logical_plan: |
    LogicalProject { exprs: [t.x, t.y, min] }
    └─LogicalOverWindow { window_functions: [min(t.x) OVER(PARTITION BY t.y ROWS BETWEEN 1 PRECEDING AND 2 FOLLOWING)] }
      └─LogicalProject { exprs: [t.x, t.y, t._row_id] }
        └─LogicalScan { table: t, columns: [t.x, t.y, t._row_id] }
  batch_error: |-
    Feature is not yet implemented: Batch over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
  stream_error: |-
    Feature is not yet implemented: General version of streaming over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
- sql: |
    create table t(x int, y int);
    select x, y, min(x) over(PARTITION BY y ROWS UNBOUNDED FOLLOWING) from t;
  binder_error: |-
    Bind error: failed to bind expression: min(x) OVER (PARTITION BY y ROWS UNBOUNDED FOLLOWING)

    Caused by:
      Invalid input syntax: window frame bounds `ROWS BETWEEN UNBOUNDED FOLLOWING AND CURRENT ROW` is not valid
- sql: |
    create table t(x int, y int);
    select x, y, lag(x) over(PARTITION BY y ORDER BY x) from t;
  logical_plan: |
    LogicalProject { exprs: [t.x, t.y, first_value] }
    └─LogicalOverWindow { window_functions: [first_value(t.x) OVER(PARTITION BY t.y ORDER BY t.x ASC ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)] }
      └─LogicalProject { exprs: [t.x, t.y, t._row_id] }
        └─LogicalScan { table: t, columns: [t.x, t.y, t._row_id] }
  batch_error: |-
    Feature is not yet implemented: Batch over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
  stream_error: |-
    Feature is not yet implemented: General version of streaming over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
- sql: |
    create table t(x int, y int);
    select x, y, max(x) over(PARTITION BY y ORDER BY x RANGE 100 PRECEDING) from t;
  binder_error: |-
    Bind error: failed to bind expression: max(x) OVER (PARTITION BY y ORDER BY x RANGE 100 PRECEDING)

    Caused by:
      Feature is not yet implemented: window frame in `RANGE` mode is not supported yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
- sql: |
    create table t(x int);
    select row_number() over(PARTITION BY x ORDER BY x), rank() over(ORDER BY x) from t;
  logical_plan: |
    LogicalProject { exprs: [row_number, rank] }
    └─LogicalOverWindow { window_functions: [row_number() OVER(PARTITION BY t.x ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), rank() OVER(ORDER BY t.x ASCROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)] }
      └─LogicalProject { exprs: [t.x, t._row_id] }
        └─LogicalScan { table: t, columns: [t.x, t._row_id] }
  batch_error: |-
    Feature is not yet implemented: Batch over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
  stream_error: |-
    Feature is not yet implemented: General version of streaming over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
- sql: |
    create table t(x int);
    select row_number() over() from t;
  planner_error: 'Invalid input syntax: window rank function without order by: row_number() OVER()'
- sql: |
    create table t(x int);
    select * from t order by (row_number() over(PARTITION BY x ORDER BY x));
  logical_plan: |
    LogicalProject { exprs: [t.x] }
    └─LogicalProject { exprs: [t.x, row_number] }
      └─LogicalOverWindow { window_functions: [row_number() OVER(PARTITION BY t.x ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)] }
        └─LogicalProject { exprs: [t.x, t._row_id] }
          └─LogicalScan { table: t, columns: [t.x, t._row_id] }
- sql: |
    create table t(x int);
    select x from t group by (row_number(x) over());
  binder_error: |-
    Bind error: failed to bind expression: (row_number(x) OVER ())

    Caused by:
      Invalid input syntax: window functions are not allowed in GROUP BY
- sql: |
    create table t(x int);
    select x from t having (row_number(x) over() > 1);
  binder_error: |-
    Bind error: failed to bind expression: (row_number(x) OVER () > 1)

    Caused by:
      Invalid input syntax: window functions are not allowed in HAVING
- sql: |
    create table t(x int);
    select x from t where (row_number(x) over() > 1);
  binder_error: |-
    Bind error: failed to bind expression: (row_number(x) OVER () > 1)

    Caused by:
      Invalid input syntax: window functions are not allowed in WHERE
- sql: |
    create table t(x int);
    select sum(x) filter (where row_number() over () > 1) from t;
  binder_error: |-
    Bind error: failed to bind expression: sum(x) FILTER(WHERE row_number() OVER () > 1)

    Caused by:
      Invalid input syntax: window functions are not allowed in FILTER
- name: TopN with rank output
  sql: |
    create table t(x int);
    select * from
      (select *, row_number() over(PARTITION BY x ORDER BY x) rank from t)
    where rank<3;
  logical_plan: |
    LogicalProject { exprs: [t.x, row_number] }
    └─LogicalFilter { predicate: (row_number < 3:Int32) }
      └─LogicalProject { exprs: [t.x, row_number] }
        └─LogicalOverWindow { window_functions: [row_number() OVER(PARTITION BY t.x ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)] }
          └─LogicalProject { exprs: [t.x, t._row_id] }
            └─LogicalScan { table: t, columns: [t.x, t._row_id] }
- name: TopN without rank output
  sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where rank<3 AND x>y;
  logical_plan: |
    LogicalProject { exprs: [t.x, t.y] }
    └─LogicalFilter { predicate: (row_number < 3:Int32) AND (t.x > t.y) }
      └─LogicalProject { exprs: [t.x, t.y, row_number] }
        └─LogicalOverWindow { window_functions: [row_number() OVER(PARTITION BY t.y ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)] }
          └─LogicalProject { exprs: [t.x, t.y, t._row_id] }
            └─LogicalScan { table: t, columns: [t.x, t.y, t._row_id] }
  optimized_logical_plan_for_batch: |
    LogicalTopN { order: "[t.x ASC]", limit: 2, offset: 0, group_key: [1] }
    └─LogicalScan { table: t, columns: [t.x, t.y], predicate: (t.x > t.y) }
  batch_plan: |
    BatchExchange { order: [], dist: Single }
    └─BatchGroupTopN { order: "[t.x ASC]", limit: 2, offset: 0, group_key: [1] }
      └─BatchExchange { order: [], dist: HashShard(t.y) }
        └─BatchFilter { predicate: (t.x > t.y) }
          └─BatchScan { table: t, columns: [t.x, t.y], distribution: SomeShard }
  stream_plan: |
    StreamMaterialize { columns: [x, y, t._row_id(hidden)], stream_key: [t._row_id], pk_columns: [t._row_id], pk_conflict: "NoCheck" }
    └─StreamExchange { dist: HashShard(t._row_id) }
      └─StreamGroupTopN { order: "[t.x ASC]", limit: 2, offset: 0, group_key: [1] }
        └─StreamExchange { dist: HashShard(t.y) }
          └─StreamFilter { predicate: (t.x > t.y) }
            └─StreamTableScan { table: t, columns: [t.x, t.y, t._row_id], pk: [t._row_id], dist: UpstreamHashShard(t._row_id) }
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where rank<=3;
  optimized_logical_plan_for_batch: |
    LogicalTopN { order: "[t.x ASC]", limit: 3, offset: 0, group_key: [1] }
    └─LogicalScan { table: t, columns: [t.x, t.y] }
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, rank() over(PARTITION BY y ORDER BY x) rank from t)
    where rank<=3;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
    └─BatchGroupTopN { order: "[t.x ASC]", limit: 3, offset: 0, with_ties: true, group_key: [1] }
      └─BatchExchange { order: [], dist: HashShard(t.y) }
        └─BatchScan { table: t, columns: [t.x, t.y], distribution: SomeShard }
  stream_plan: |
    StreamMaterialize { columns: [x, y, t._row_id(hidden)], stream_key: [t._row_id], pk_columns: [t._row_id], pk_conflict: "NoCheck" }
    └─StreamExchange { dist: HashShard(t._row_id) }
      └─StreamGroupTopN { order: "[t.x ASC]", limit: 3, offset: 0, group_key: [1], with_ties: true }
        └─StreamExchange { dist: HashShard(t.y) }
          └─StreamTableScan { table: t, columns: [t.x, t.y, t._row_id], pk: [t._row_id], dist: UpstreamHashShard(t._row_id) }
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, rank() over(PARTITION BY y ORDER BY x) rank from t)
    where rank<=3 AND rank > 1;
    -- OFFSET for RANK() is not yet supported
  logical_plan: |
    LogicalProject { exprs: [t.x, t.y] }
    └─LogicalFilter { predicate: (rank <= 3:Int32) AND (rank > 1:Int32) }
      └─LogicalProject { exprs: [t.x, t.y, rank] }
        └─LogicalOverWindow { window_functions: [rank() OVER(PARTITION BY t.y ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)] }
          └─LogicalProject { exprs: [t.x, t.y, t._row_id] }
            └─LogicalScan { table: t, columns: [t.x, t.y, t._row_id] }
  batch_error: |-
    Feature is not yet implemented: Batch over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
  stream_error: |-
    Feature is not yet implemented: General version of streaming over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where rank>3;
  optimized_logical_plan_for_batch: |
    LogicalTopN { order: "[t.x ASC]", limit: 9223372036854775807, offset: 3, group_key: [1] }
    └─LogicalScan { table: t, columns: [t.x, t.y] }
  stream_error: 'Invalid input syntax: OFFSET without LIMIT in streaming mode'
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where rank>=3;
  optimized_logical_plan_for_batch: |
    LogicalTopN { order: "[t.x ASC]", limit: 9223372036854775807, offset: 2, group_key: [1] }
    └─LogicalScan { table: t, columns: [t.x, t.y] }
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where 3 <= rank AND rank <= 5;
  optimized_logical_plan_for_batch: |
    LogicalTopN { order: "[t.x ASC]", limit: 3, offset: 2, group_key: [1] }
    └─LogicalScan { table: t, columns: [t.x, t.y] }
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where rank BETWEEN 3 AND 5;
  optimized_logical_plan_for_batch: |
    LogicalTopN { order: "[t.x ASC]", limit: 3, offset: 2, group_key: [1] }
    └─LogicalScan { table: t, columns: [t.x, t.y] }
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where 3 < rank AND rank <= 5;
  optimized_logical_plan_for_batch: |
    LogicalTopN { order: "[t.x ASC]", limit: 2, offset: 3, group_key: [1] }
    └─LogicalScan { table: t, columns: [t.x, t.y] }
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where 3 <= rank AND rank < 5;
  optimized_logical_plan_for_batch: |
    LogicalTopN { order: "[t.x ASC]", limit: 2, offset: 2, group_key: [1] }
    └─LogicalScan { table: t, columns: [t.x, t.y] }
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where 3 < rank AND rank < 5;
  optimized_logical_plan_for_batch: |
    LogicalTopN { order: "[t.x ASC]", limit: 1, offset: 3, group_key: [1] }
    └─LogicalScan { table: t, columns: [t.x, t.y] }
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where 3 < rank AND rank < 6 AND rank >= 4 AND rank < 5;
  optimized_logical_plan_for_batch: |
    LogicalTopN { order: "[t.x ASC]", limit: 1, offset: 3, group_key: [1] }
    └─LogicalScan { table: t, columns: [t.x, t.y] }
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where 3 < rank AND rank = 4 AND rank <= 5;
  optimized_logical_plan_for_batch: |
    LogicalTopN { order: "[t.x ASC]", limit: 1, offset: 3, group_key: [1] }
    └─LogicalScan { table: t, columns: [t.x, t.y] }
- sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY y ORDER BY x) rank from t)
    where 3 < rank AND rank = 6 AND rank <= 5;
  logical_plan: |
    LogicalProject { exprs: [t.x, t.y] }
    └─LogicalFilter { predicate: (3:Int32 < row_number) AND (row_number = 6:Int32) AND (row_number <= 5:Int32) }
      └─LogicalProject { exprs: [t.x, t.y, row_number] }
        └─LogicalOverWindow { window_functions: [row_number() OVER(PARTITION BY t.y ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)] }
          └─LogicalProject { exprs: [t.x, t.y, t._row_id] }
            └─LogicalScan { table: t, columns: [t.x, t.y, t._row_id] }
  batch_error: |-
    Feature is not yet implemented: Batch over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
  stream_error: |-
    Feature is not yet implemented: General version of streaming over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
- id: split diff order_by and partition_by in window
  sql: |
    create table t(x int, y int, z int);
    select *, rank() over(PARTITION BY x ORDER BY y) w0, sum(x) over(PARTITION BY z ORDER BY y) w1, row_number() over(PARTITION BY x ORDER BY y) w2, rank() over(PARTITION BY y ORDER BY x) w3 from t;
  logical_plan: |
    LogicalProject { exprs: [t.x, t.y, t.z, rank, sum, row_number, rank] }
    └─LogicalOverWindow { window_functions: [rank() OVER(PARTITION BY t.x ORDER BY t.y ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), sum(t.x) OVER(PARTITION BY t.z ORDER BY t.y ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), row_number() OVER(PARTITION BY t.x ORDER BY t.y ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), rank() OVER(PARTITION BY t.y ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)] }
      └─LogicalProject { exprs: [t.x, t.y, t.z, t._row_id] }
        └─LogicalScan { table: t, columns: [t.x, t.y, t.z, t._row_id] }
  optimized_logical_plan_for_batch: |
    LogicalProject { exprs: [t.x, t.y, t.z, rank, sum, row_number, rank] }
    └─LogicalOverWindow { window_functions: [rank() OVER(PARTITION BY t.y ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)] }
      └─LogicalOverWindow { window_functions: [sum(t.x) OVER(PARTITION BY t.z ORDER BY t.y ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)] }
        └─LogicalOverWindow { window_functions: [rank() OVER(PARTITION BY t.x ORDER BY t.y ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), row_number() OVER(PARTITION BY t.x ORDER BY t.y ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)] }
          └─LogicalScan { table: t, columns: [t.x, t.y, t.z] }
  batch_error: |-
    Feature is not yet implemented: Batch over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
  stream_error: |-
    Feature is not yet implemented: General version of streaming over window is not implemented yet
    Tracking issue: https://github.com/risingwavelabs/risingwave/issues/9124
- id: over window to agg and join
  sql: |
    create table t(x int, y int, z int, w int);
    select x, y, sum(x) over(partition by y), max(x) over(partition by y), min(w) over(partition by y) from t;
  logical_plan: |
    LogicalProject { exprs: [t.x, t.y, sum, max, min] }
    └─LogicalOverWindow { window_functions: [sum(t.x) OVER(PARTITION BY t.y ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), max(t.x) OVER(PARTITION BY t.y ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), min(t.w) OVER(PARTITION BY t.y ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)] }
      └─LogicalProject { exprs: [t.x, t.y, t.z, t.w, t._row_id] }
        └─LogicalScan { table: t, columns: [t.x, t.y, t.z, t.w, t._row_id] }
  optimized_logical_plan_for_batch: |
    LogicalJoin { type: Inner, on: (t.y = t.y), output: [t.x, t.y, sum(t.x), max(t.x), min(t.w)] }
    ├─LogicalScan { table: t, columns: [t.x, t.y, t.w] }
    └─LogicalAgg { group_key: [t.y], aggs: [sum(t.x), max(t.x), min(t.w)] }
      └─LogicalScan { table: t, columns: [t.x, t.y, t.w] }
  batch_plan: |
    BatchExchange { order: [], dist: Single }
    └─BatchHashJoin { type: Inner, predicate: t.y = t.y, output: [t.x, t.y, sum(t.x), max(t.x), min(t.w)] }
      ├─BatchExchange { order: [], dist: HashShard(t.y) }
      | └─BatchScan { table: t, columns: [t.x, t.y, t.w], distribution: SomeShard }
      └─BatchHashAgg { group_key: [t.y], aggs: [sum(t.x), max(t.x), min(t.w)] }
        └─BatchExchange { order: [], dist: HashShard(t.y) }
          └─BatchScan { table: t, columns: [t.x, t.y, t.w], distribution: SomeShard }
  stream_plan: |
    StreamMaterialize { columns: [x, y, sum, max, min, t._row_id(hidden), t.y(hidden)], stream_key: [t._row_id, t.y, y], pk_columns: [t._row_id, t.y, y], pk_conflict: "NoCheck" }
    └─StreamHashJoin { type: Inner, predicate: t.y = t.y, output: [t.x, t.y, sum(t.x), max(t.x), min(t.w), t._row_id, t.y] }
      ├─StreamExchange { dist: HashShard(t.y) }
      | └─StreamShare { id = 1 }
      |   └─StreamTableScan { table: t, columns: [t.x, t.y, t.w, t._row_id], pk: [t._row_id], dist: UpstreamHashShard(t._row_id) }
      └─StreamProject { exprs: [t.y, sum(t.x), max(t.x), min(t.w)] }
        └─StreamHashAgg { group_key: [t.y], aggs: [sum(t.x), max(t.x), min(t.w), count] }
          └─StreamExchange { dist: HashShard(t.y) }
            └─StreamShare { id = 1 }
              └─StreamTableScan { table: t, columns: [t.x, t.y, t.w, t._row_id], pk: [t._row_id], dist: UpstreamHashShard(t._row_id) }
- id: create_bid
  sql: |
    /*
    The following example is adapted from
    https://nightlies.apache.org/flink/flink-docs-release-1.16/docs/dev/table/sql/queries/window-topn/

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
    */
    CREATE TABLE bid (
      "bidtime" TIMESTAMP,
      "price" BIGINT,
      "item" VARCHAR,
      "supplier_id" VARCHAR
    );
- before:
  - create_bid
  sql: |
    -- Window Top-N which follows after Window Aggregation
    -- Top 3 suppliers who have the highest sales for every tumbling 10 minutes window.
    SELECT window_start, window_end, supplier_id, price, cnt
    FROM (
      SELECT *, ROW_NUMBER() OVER (PARTITION BY window_start, window_end ORDER BY price DESC) as rownum
      FROM (
        SELECT window_start, window_end, supplier_id, SUM(price) as price, COUNT(*) as cnt
        FROM
          TUMBLE(Bid, bidtime, INTERVAL '10' MINUTE)
        GROUP BY window_start, window_end, supplier_id
      )
    ) WHERE rownum <= 3;
  stream_plan: |
    StreamMaterialize { columns: [window_start, window_end, supplier_id, price, cnt], stream_key: [window_start, window_end, supplier_id], pk_columns: [window_start, window_end, supplier_id], pk_conflict: "NoCheck" }
    └─StreamGroupTopN { order: "[sum(bid.price) DESC]", limit: 3, offset: 0, group_key: [0, 1] }
      └─StreamExchange { dist: HashShard($expr1, $expr2) }
        └─StreamHashAgg { group_key: [$expr1, $expr2, bid.supplier_id], aggs: [sum(bid.price), count] }
          └─StreamExchange { dist: HashShard($expr1, $expr2, bid.supplier_id) }
            └─StreamProject { exprs: [TumbleStart(bid.bidtime, '00:10:00':Interval) as $expr1, (TumbleStart(bid.bidtime, '00:10:00':Interval) + '00:10:00':Interval) as $expr2, bid.supplier_id, bid.price, bid._row_id] }
              └─StreamTableScan { table: bid, columns: [bid.bidtime, bid.price, bid.supplier_id, bid._row_id], pk: [bid._row_id], dist: UpstreamHashShard(bid._row_id) }
- before:
  - create_bid
  sql: |
    -- Window Top-N follows directly after Window TVF
    -- Top 3 items which have the highest price for every tumbling 10 minutes window.
    SELECT window_start, window_end, supplier_id, price
    FROM (
      SELECT *, ROW_NUMBER() OVER (PARTITION BY window_start, window_end ORDER BY price DESC) as rownum
        FROM
          TUMBLE(Bid, bidtime, INTERVAL '10' MINUTE)
    ) WHERE rownum <= 3;
  stream_plan: |
    StreamMaterialize { columns: [window_start, window_end, supplier_id, price, bid._row_id(hidden)], stream_key: [bid._row_id], pk_columns: [bid._row_id], pk_conflict: "NoCheck" }
    └─StreamExchange { dist: HashShard(bid._row_id) }
      └─StreamProject { exprs: [$expr1, $expr2, bid.supplier_id, bid.price, bid._row_id] }
        └─StreamGroupTopN { order: "[bid.price DESC]", limit: 3, offset: 0, group_key: [2, 3] }
          └─StreamExchange { dist: HashShard($expr1, $expr2) }
            └─StreamProject { exprs: [bid.price, bid.supplier_id, TumbleStart(bid.bidtime, '00:10:00':Interval) as $expr1, (TumbleStart(bid.bidtime, '00:10:00':Interval) + '00:10:00':Interval) as $expr2, bid._row_id] }
              └─StreamTableScan { table: bid, columns: [bid.bidtime, bid.price, bid.supplier_id, bid._row_id], pk: [bid._row_id], dist: UpstreamHashShard(bid._row_id) }
- name: Deduplication
  sql: |
    create table t(x int, y int);
    select x, y from
      (select *, row_number() over(PARTITION BY x ORDER BY y) rank from t)
    where rank = 1
  logical_plan: |
    LogicalProject { exprs: [t.x, t.y] }
    └─LogicalFilter { predicate: (row_number = 1:Int32) }
      └─LogicalProject { exprs: [t.x, t.y, row_number] }
        └─LogicalOverWindow { window_functions: [row_number() OVER(PARTITION BY t.x ORDER BY t.y ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)] }
          └─LogicalProject { exprs: [t.x, t.y, t._row_id] }
            └─LogicalScan { table: t, columns: [t.x, t.y, t._row_id] }
  optimized_logical_plan_for_batch: |
    LogicalTopN { order: "[t.y ASC]", limit: 1, offset: 0, group_key: [0] }
    └─LogicalScan { table: t, columns: [t.x, t.y] }
  stream_plan: |
    StreamMaterialize { columns: [x, y, t._row_id(hidden)], stream_key: [x], pk_columns: [x], pk_conflict: "NoCheck" }
    └─StreamGroupTopN { order: "[t.y ASC]", limit: 1, offset: 0, group_key: [0] }
      └─StreamExchange { dist: HashShard(t.x) }
        └─StreamTableScan { table: t, columns: [t.x, t.y, t._row_id], pk: [t._row_id], dist: UpstreamHashShard(t._row_id) }
- name: cte1
  sql: |
    create table t (x int, y int, z int);
    with cte as (SELECT x, y, z FROM (
      SELECT *, row_number() OVER (PARTITION BY x ORDER BY y) AS rank FROM t
    ) WHERE rank <= 3) select z from cte;
  logical_plan: |
    LogicalProject { exprs: [t.z] }
    └─LogicalShare { id = 6 }
      └─LogicalProject { exprs: [t.x, t.y, t.z] }
        └─LogicalFilter { predicate: (row_number <= 3:Int32) }
          └─LogicalProject { exprs: [t.x, t.y, t.z, row_number] }
            └─LogicalOverWindow { window_functions: [row_number() OVER(PARTITION BY t.x ORDER BY t.y ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)] }
              └─LogicalProject { exprs: [t.x, t.y, t.z, t._row_id] }
                └─LogicalScan { table: t, columns: [t.x, t.y, t.z, t._row_id] }
  optimized_logical_plan_for_batch: |
    LogicalProject { exprs: [t.z] }
    └─LogicalTopN { order: "[t.y ASC]", limit: 3, offset: 0, group_key: [0] }
      └─LogicalScan { table: t, columns: [t.x, t.y, t.z] }
  stream_plan: |
    StreamMaterialize { columns: [z, t._row_id(hidden)], stream_key: [t._row_id], pk_columns: [t._row_id], pk_conflict: "NoCheck" }
    └─StreamExchange { dist: HashShard(t._row_id) }
      └─StreamProject { exprs: [t.z, t._row_id] }
        └─StreamGroupTopN { order: "[t.y ASC]", limit: 3, offset: 0, group_key: [0] }
          └─StreamExchange { dist: HashShard(t.x) }
            └─StreamTableScan { table: t, columns: [t.x, t.y, t.z, t._row_id], pk: [t._row_id], dist: UpstreamHashShard(t._row_id) }
- name: cte2
  sql: |
    create table t (x int, y int, z int);
    with cte as (
    select x, z from (
        select x, y, z, row_number() over (partition by x order by y) as rank from t
    ) t
    where rank = 1
    )
    select t1.x as t1x, t2.x as t2x, t1.z as t1z, t2.y as t2y, t2.z as t2z from cte t1
    inner join t t2
    on t1.x = t2.x;
  logical_plan: |
    LogicalProject { exprs: [t.x, t.x, t.z, t.y, t.z] }
    └─LogicalJoin { type: Inner, on: (t.x = t.x), output: all }
      ├─LogicalShare { id = 6 }
      | └─LogicalProject { exprs: [t.x, t.z] }
      |   └─LogicalFilter { predicate: (row_number = 1:Int32) }
      |     └─LogicalProject { exprs: [t.x, t.y, t.z, row_number] }
      |       └─LogicalOverWindow { window_functions: [row_number() OVER(PARTITION BY t.x ORDER BY t.y ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)] }
      |         └─LogicalProject { exprs: [t.x, t.y, t.z, t._row_id] }
      |           └─LogicalScan { table: t, columns: [t.x, t.y, t.z, t._row_id] }
      └─LogicalScan { table: t, columns: [t.x, t.y, t.z, t._row_id] }
  optimized_logical_plan_for_batch: |
    LogicalJoin { type: Inner, on: (t.x = t.x), output: [t.x, t.x, t.z, t.y, t.z] }
    ├─LogicalTopN { order: "[t.y ASC]", limit: 1, offset: 0, group_key: [0] }
    | └─LogicalScan { table: t, columns: [t.x, t.y, t.z] }
    └─LogicalScan { table: t, columns: [t.x, t.y, t.z] }
  stream_plan: |
    StreamMaterialize { columns: [t1x, t2x, t1z, t2y, t2z, t._row_id(hidden)], stream_key: [t1x, t._row_id], pk_columns: [t1x, t._row_id], pk_conflict: "NoCheck" }
    └─StreamHashJoin { type: Inner, predicate: t.x = t.x, output: [t.x, t.x, t.z, t.y, t.z, t._row_id] }
      ├─StreamGroupTopN { order: "[t.y ASC]", limit: 1, offset: 0, group_key: [0] }
      | └─StreamExchange { dist: HashShard(t.x) }
      |   └─StreamTableScan { table: t, columns: [t.x, t.y, t.z, t._row_id], pk: [t._row_id], dist: UpstreamHashShard(t._row_id) }
      └─StreamExchange { dist: HashShard(t.x) }
        └─StreamTableScan { table: t, columns: [t.x, t.y, t.z, t._row_id], pk: [t._row_id], dist: UpstreamHashShard(t._row_id) }
- name: group_topn_with_same_key
  sql: |
    create table t (x int, y int, z int);
    SELECT z FROM (
      SELECT *, row_number() over (partition by x,y order by x) as rank FROM t
    )
    WHERE rank <=1;
  logical_plan: |
    LogicalProject { exprs: [t.z] }
    └─LogicalFilter { predicate: (row_number <= 1:Int32) }
      └─LogicalProject { exprs: [t.x, t.y, t.z, row_number] }
        └─LogicalOverWindow { window_functions: [row_number() OVER(PARTITION BY t.x, t.y ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)] }
          └─LogicalProject { exprs: [t.x, t.y, t.z, t._row_id] }
            └─LogicalScan { table: t, columns: [t.x, t.y, t.z, t._row_id] }
  optimized_logical_plan_for_batch: |
    LogicalProject { exprs: [t.z] }
    └─LogicalTopN { order: "[t.x ASC]", limit: 1, offset: 0, group_key: [0, 1] }
      └─LogicalScan { table: t, columns: [t.x, t.y, t.z] }
  stream_plan: |
    StreamMaterialize { columns: [z, t.x(hidden), t.y(hidden)], stream_key: [t.x, t.y], pk_columns: [t.x, t.y], pk_conflict: "NoCheck" }
    └─StreamProject { exprs: [t.z, t.x, t.y] }
      └─StreamGroupTopN { order: "[t.x ASC]", limit: 1, offset: 0, group_key: [0, 1] }
        └─StreamExchange { dist: HashShard(t.x, t.y) }
          └─StreamTableScan { table: t, columns: [t.x, t.y, t.z, t._row_id], pk: [t._row_id], dist: UpstreamHashShard(t._row_id) }
  stream_dist_plan: |+
    Fragment 0
    StreamMaterialize { columns: [z, t.x(hidden), t.y(hidden)], stream_key: [t.x, t.y], pk_columns: [t.x, t.y], pk_conflict: "NoCheck" }
    ├── materialized table: 4294967294
    └── StreamProject { exprs: [t.z, t.x, t.y] }
        └── StreamGroupTopN { order: "[t.x ASC]", limit: 1, offset: 0, group_key: [0, 1] } { state table: 0 }
            └──  StreamExchange Hash([0, 1]) from 1

    Fragment 1
    Chain { table: t, columns: [t.x, t.y, t.z, t._row_id], pk: [t._row_id], dist: UpstreamHashShard(t._row_id) } { state table: 1 }
    ├──  Upstream
    └──  BatchPlanNode

    Table 0
    ├── columns: [ t_x, t_y, t_z, t__row_id ]
    ├── primary key: [ $0 ASC, $1 ASC, $0 ASC, $3 ASC ]
    ├── value indices: [ 0, 1, 2, 3 ]
    ├── distribution key: [ 0, 1 ]
    └── read pk prefix len hint: 2

    Table 1
    ├── columns: [ vnode, _row_id, t_backfill_finished ]
    ├── primary key: [ $0 ASC ]
    ├── value indices: [ 1, 2 ]
    ├── distribution key: [ 0 ]
    ├── read pk prefix len hint: 1
    └── vnode column idx: 0

    Table 4294967294
    ├── columns: [ z, t.x, t.y ]
    ├── primary key: [ $1 ASC, $2 ASC ]
    ├── value indices: [ 0, 1, 2 ]
    ├── distribution key: [ 1, 2 ]
    └── read pk prefix len hint: 2

- name: over window with expr in window
  sql: |
    create table t(x int, y int, z int, w int);
    select * from (
        SELECT x, y, z, avg(z * z) OVER (PARTITION BY y + 1 order by abs(w)) as res FROM t
    )
    WHERE z > 0 and y > 0 and x > 0 and res <= 3.0;
  logical_plan: |
    LogicalProject { exprs: [t.x, t.y, t.z, $expr4] }
    └─LogicalFilter { predicate: (t.z > 0:Int32) AND (t.y > 0:Int32) AND (t.x > 0:Int32) AND ($expr4 <= 3.0:Decimal) }
      └─LogicalProject { exprs: [t.x, t.y, t.z, (sum::Decimal / count::Decimal) as $expr4] }
        └─LogicalOverWindow { window_functions: [sum($expr1) OVER(PARTITION BY $expr3 ORDER BY $expr2 ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), count($expr1) OVER(PARTITION BY $expr3 ORDER BY $expr2 ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)] }
          └─LogicalProject { exprs: [t.x, t.y, t.z, t.w, t._row_id, (t.z * t.z) as $expr1, Abs(t.w) as $expr2, (t.y + 1:Int32) as $expr3] }
            └─LogicalScan { table: t, columns: [t.x, t.y, t.z, t.w, t._row_id] }
  optimized_logical_plan_for_batch: |
    LogicalProject { exprs: [t.x, t.y, t.z, (sum::Decimal / count::Decimal) as $expr4] }
    └─LogicalFilter { predicate: ((sum::Decimal / count::Decimal) <= 3.0:Decimal) }
      └─LogicalOverWindow { window_functions: [sum($expr1) OVER(PARTITION BY $expr3 ORDER BY $expr2 ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), count($expr1) OVER(PARTITION BY $expr3 ORDER BY $expr2 ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)] }
        └─LogicalProject { exprs: [t.x, t.y, t.z, (t.z * t.z) as $expr1, Abs(t.w) as $expr2, (t.y + 1:Int32) as $expr3] }
          └─LogicalScan { table: t, columns: [t.x, t.y, t.z, t.w], predicate: (t.z > 0:Int32) AND (t.y > 0:Int32) AND (t.x > 0:Int32) }
- name: stddev_samp
  sql: |
    create table t(x int, y int, z int, w int);
    select * from (
        SELECT x, y, z, stddev_pop(x - y) OVER (PARTITION BY z order by x) as res0, stddev_samp(x) OVER (PARTITION BY z order by x) as res1 FROM t
    )
    WHERE z > 0 and y > 0 and x > 0 and res0 <= 3.0 and res1 > 1.0;
  logical_plan: |
    LogicalProject { exprs: [t.x, t.y, t.z, $expr4, $expr5] }
    └─LogicalFilter { predicate: (t.z > 0:Int32) AND (t.y > 0:Int32) AND (t.x > 0:Int32) AND ($expr4 <= 3.0:Decimal) AND ($expr5 > 1.0:Decimal) }
      └─LogicalProject { exprs: [t.x, t.y, t.z, Sqrt(((sum::Decimal - ((sum::Decimal * sum::Decimal) / count::Decimal)) / count::Decimal)) as $expr4, Case((count <= 1:Int64), null:Decimal, Sqrt(((sum::Decimal - ((sum::Decimal * sum::Decimal) / count::Decimal)) / (count - 1:Int64)::Decimal))) as $expr5] }
        └─LogicalOverWindow { window_functions: [sum($expr1) OVER(PARTITION BY t.z ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), sum($expr2) OVER(PARTITION BY t.z ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), count($expr2) OVER(PARTITION BY t.z ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), sum($expr3) OVER(PARTITION BY t.z ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), sum(t.x) OVER(PARTITION BY t.z ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), count(t.x) OVER(PARTITION BY t.z ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)] }
          └─LogicalProject { exprs: [t.x, t.y, t.z, t.w, t._row_id, ((t.x - t.y) * (t.x - t.y)) as $expr1, (t.x - t.y) as $expr2, (t.x * t.x) as $expr3] }
            └─LogicalScan { table: t, columns: [t.x, t.y, t.z, t.w, t._row_id] }
  optimized_logical_plan_for_batch: |
    LogicalProject { exprs: [t.x, t.y, t.z, Sqrt(((sum::Decimal - ((sum::Decimal * sum::Decimal) / count::Decimal)) / count::Decimal)) as $expr4, Case((count <= 1:Int64), null:Decimal, Sqrt(((sum::Decimal - ((sum::Decimal * sum::Decimal) / count::Decimal)) / (count - 1:Int64)::Decimal))) as $expr5] }
    └─LogicalFilter { predicate: (Sqrt(((sum::Decimal - ((sum::Decimal * sum::Decimal) / count::Decimal)) / count::Decimal)) <= 3.0:Decimal) AND (Case((count <= 1:Int64), null:Decimal, Sqrt(((sum::Decimal - ((sum::Decimal * sum::Decimal) / count::Decimal)) / (count - 1:Int64)::Decimal))) > 1.0:Decimal) }
      └─LogicalOverWindow { window_functions: [sum($expr1) OVER(PARTITION BY t.z ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), sum($expr2) OVER(PARTITION BY t.z ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), count($expr2) OVER(PARTITION BY t.z ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), sum($expr3) OVER(PARTITION BY t.z ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), sum(t.x) OVER(PARTITION BY t.z ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), count(t.x) OVER(PARTITION BY t.z ORDER BY t.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)] }
        └─LogicalProject { exprs: [t.x, t.y, t.z, ((t.x - t.y) * (t.x - t.y)) as $expr1, (t.x - t.y) as $expr2, (t.x * t.x) as $expr3] }
          └─LogicalScan { table: t, columns: [t.x, t.y, t.z], predicate: (t.z > 0:Int32) AND (t.y > 0:Int32) AND (t.x > 0:Int32) }
